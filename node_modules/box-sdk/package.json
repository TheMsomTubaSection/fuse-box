{
  "name": "box-sdk",
  "description": "Node.js client for Box Content API",
  "version": "0.0.5",
  "homepage": "https://github.com/adityamukho/node-box-sdk",
  "author": {
    "name": "Aditya Mukhopadhyay",
    "email": "webmaster@adityamukho.com",
    "url": "http://adityamukho.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/adityamukho/node-box-sdk.git"
  },
  "bugs": {
    "url": "https://github.com/adityamukho/node-box-sdk/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/adityamukho/node-box-sdk/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/box-sdk",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt mochaTest"
  },
  "devDependencies": {
    "body-parser": "1.0.2",
    "cookie-parser": "^1.0.1",
    "ejs": "^1.0.0",
    "express": "4.1.1",
    "express-session": "1.0.4",
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-jsdoc": "^0.5.4",
    "grunt-mocha-test": "^0.10.2",
    "image-size": "^0.2.3",
    "method-override": "^1.0.0",
    "mkdirp": "^0.4.0",
    "morgan": "1.0.1",
    "passport": "^0.2.0",
    "passport-box": "0.1.0",
    "rimraf": "^2.2.6"
  },
  "keywords": [
    "box.com",
    "SDK",
    "Content API"
  ],
  "dependencies": {
    "async": "^0.7.0",
    "base-framework": "^1.0.1",
    "form-data": "^0.1.2",
    "lodash": "^2.4.1",
    "log": "^1.4.0",
    "monologue.js": "^0.1.4",
    "nedb": "^0.10.5",
    "request": "2.34.0",
    "router": "^0.6.2"
  },
  "readme": "# Node Box SDK [![Build Status](https://travis-ci.org/adityamukho/node-box-sdk.svg?branch=master)](https://travis-ci.org/adityamukho/node-box-sdk)\n\n[![Npm Downloads](https://nodei.co/npm/box-sdk.png?downloads=true&stars=true)](https://www.npmjs.org/package/box-sdk)\n\nNode.js client for the [Box.com Content API](https://developers.box.com/docs/).\n\n## Supported Features\n* All File Ops\n* All Folder Ops\n* Events - Long Polling\n* Search\n\nThe SDK aims to abstract away the intricacies of authentication, refreshing tokens, etc. as far as possible. Hence, you will not find explicit methods to perform low-level operations.\n\nAll legitimate public methods map to the high level functionality described in the [Content API docs](https://developers.box.com/docs/).\n\n## Getting Started\nInstall the module with: `npm install box-sdk`\n\n### Running _Standalone_\n\n```javascript\nvar box_sdk = require('box-sdk');\n\nvar logLevel = 'debug'; //default log level on construction is info\n\n//Default host: localhost\nvar box = box_sdk.Box({\n  client_id: 'client id',\n  client_secret: 'client secret',\n  port: 9999,\n  host: 'somehost' //default localhost\n}, logLevel);\nvar connection = box.getConnection('some.email@example.com');\n\n//Navigate user to the auth URL\nconsole.log(connection.getAuthURL());\n\nconnection.ready(function () {\n  connection.getFolderItems(0, {limit: 1}, function (err, result) {\n    if (err) {\n      console.error(JSON.stringify(err.context_info));\n    }\n    console.dir(result);\n  });\n});\n```\n\n### Running with Passport authentication under Express\n**Note:** There is a complete express example in [this gist](https://gist.github.com/adityamukho/13c7c462e216fa02d0a9).\n```javascript\nvar express = require('express'),\n  passport = require('passport'),\n  BoxStrategy = require('passport-box').Strategy,\n  box_sdk = require('../../..');\n\n...\n\nvar box = box_sdk.Box();\n\n...\n\npassport.use(new BoxStrategy({\n  clientID: BOX_CLIENT_ID,\n  clientSecret: BOX_CLIENT_SECRET,\n  callbackURL: \"http://127.0.0.1:\" + PORT + \"/auth/box/callback\"\n}, box.authenticate()));\n\n...\n\nvar app = express();\n\n...\n\napp.get('/auth/box', passport.authenticate('box'), function (req, res) {});\n\napp.get('/auth/box/callback',\n  passport.authenticate('box', {\n    failureRedirect: '/login'\n  }),\n  function (req, res) {\n    res.redirect('/');\n  });\n\napp.get('/', function (req, res) {\n  var opts = {\n    user: req.user\n  };\n  if (req.user) {\n    var connection = box.getConnection(req.user.login);\n    connection.ready(function () {\n      connection.getFolderItems(0, null, function (err, result) {\n        if (err) {\n          opts.body = err;\n        } else {\n          opts.body = result;\n        }\n        res.render('index', opts);\n      });\n    });\n  } else {\n    res.render('index', opts);\n  }\n});\n```\n\n### Long Polling\n```javascript\nvar connection = box.getConnection('some.email@example.com');\n\n//Navigate user to the auth URL\nconsole.log(connection.getAuthURL());\n\nconnection.ready(function () {\n  connection.startLongPolling();\n\n  //Monologue subscription filter to catch all polling events\n  connection.on('polling.event.#', function (data) {\n    console.log('Received event: %s', data.event_type);\n\n    //Handle event\n    ...\n  });\n  connection.on('polling.end', function() {\n    //Continue with post-polling ops\n    ...\n  });\n  connection.on('polling.error', function (err) {\n    console.error(err);\n  });\n\n  //Conquer the universe, etc\n  ...\n\n  //In some block later...\n  //connection.stopLongPolling();\n};\n```\n\n### Testing\nBefore running your tests locally, copy `test/env.json.example` to `test/env.json` and fill in correct values for the environment variables to be imported during testing.\n\nThe `casperjs` and `phantomjs` executables must be available in the enviroment path. Usually it is enough to run:\n```bash\n$ (sudo) npm install -g phantomjs\n$ (sudo) npm install -g casperjs\n```\n\nRun all tests with:\n```bash\n$ grunt mochaTest\n```\n\nThe files under `test/integration` are completely self-contained, and hence can be run independently. For example:\n```bash\n$ grunt mochaTest --target=./test/integration/api/content/folders-test.js\n```\n\n## Documentation\nAPI documentation is generated by running:\n```bash\n$ grunt jsdoc\n```\nThe generated documentation is available in the `dist/docs` folder. An up-to-date online version is hosted at http://adityamukho.github.io/node-box-sdk/ .\n\n## Examples\nComplete tutorials will soon be added to the documentation. In the meantime, have a look at the included test cases to get an idea of how the SDK is used.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## License\nCopyright (c) 2014-2015 Aditya Mukhopadhyay\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "box-sdk@0.0.5",
  "dist": {
    "shasum": "6520ab82b2c22e85223ea2581a5eb51e1389aa2d"
  },
  "_from": "box-sdk@",
  "_resolved": "https://registry.npmjs.org/box-sdk/-/box-sdk-0.0.5.tgz"
}
